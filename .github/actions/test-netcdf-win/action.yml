name: Test parallel MF6 (Windows)
description: Build and test parallel MODFLOW 6 on Windows
runs:
  using: "composite"
  steps:

#    - name: Build MF6 parallel
#      uses: ./modflow6/.github/actions/build-par-win

#    - name: Setup PETSc
#      uses: ./modflow6/.github/actions/build-petsc-win

    - name: Convert line endings
      shell: cmd
      run: |
        unix2dos -n "%GITHUB_WORKSPACE%\modflow6\.github\common\configure_petsc.sh" "%TEMP%\configure_petsc.sh"
        unix2dos -n "%GITHUB_WORKSPACE%\modflow6\.github\common\compile_petsc.sh" "%TEMP%\compile_petsc.sh"

    - name: Hide Strawberry programs
      shell: bash
      run: |
        mkdir "$RUNNER_TEMP/strawberry"
        mv /c/Strawberry/c/bin/gmake "$RUNNER_TEMP/strawberry/gmake"
        mv /c/Strawberry/perl/bin/pkg-config "$RUNNER_TEMP/strawberry/pkg-config"
        mv /c/Strawberry/perl/bin/pkg-config.bat "$RUNNER_TEMP/strawberry/pkg-config.bat"

    - name: Get date
      id: get-date
      shell: bash
      run: echo "date=$(/bin/date -u "+%Y%m%d")" >> "$GITHUB_OUTPUT"

    - name: Setup oneAPI
      uses: ./modflow6/.github/actions/setup-par-oneapi

    - name: Restore PETSc cache
      id: petsc-cache
      uses: actions/cache/restore@v3
      with:
        path: petsc
        key: petsc-${{ runner.os }}-${{ steps.get-date.outputs.date }}

    - name: Download PETSc
      if: steps.petsc-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl https://web.cels.anl.gov/projects/petsc/download/release-snapshots/petsc-3.20.5.tar.gz -O -J
        mkdir petsc
        tar -xzf petsc-3.20.5.tar.gz -C petsc --strip-components=1

    - name: Setup Cygwin
      if: steps.petsc-cache.outputs.cache-hit != 'true'
      uses: egor-tensin/setup-cygwin@v4
      with:
        packages: python3 make gcc-core gcc-g++ pkg-config

    - name: Hide Cygwin linker
      if: steps.petsc-cache.outputs.cache-hit != 'true'
      shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
      run: mv /usr/bin/link.exe /usr/bin/link-cygwin.exe

    - name: Configure PETSc
      if: steps.petsc-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        "%ONEAPI_ROOT%\setvars.bat" intel64 vs2022 && "C:\tools\cygwin\bin\bash.exe" --login --norc -eo pipefail -o igncr "%TEMP%\configure_petsc.sh"

    - name: Build PETSc
      if: steps.petsc-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        "%ONEAPI_ROOT%\setvars.bat" intel64 vs2022 && "C:\tools\cygwin\bin\bash.exe" --login --norc -eo pipefail -o igncr "%TEMP%\compile_petsc.sh"

    - name: Save PETSc cache
      if: steps.petsc-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: petsc
        key: petsc-${{ runner.os }}-${{ steps.get-date.outputs.date }}

    - name: Setup PETSC environment
      shell: cmd
      run: |
        set PETSC_DIR=%GITHUB_WORKSPACE%\petsc
        set PETSC_ARCH=arch-mswin-c-opt
        echo PETSC_DIR=%PETSC_DIR%>>%GITHUB_ENV%
        echo PETSC_ARCH=%PETSC_ARCH%>>%GITHUB_ENV%
        echo %PETSC_DIR%\%PETSC_ARCH%\lib>>%GITHUB_PATH%

#    - name: Download for NetCDF build
#      shell: bash
#      run: |
#        curl https://zlib.net/zlib-1.3.1.tar.gz -O -J
#        curl https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.14/hdf5-1.14.4/src/hdf5-1.14.4-3.tar.gz -O -J
#        curl https://downloads.unidata.ucar.edu/netcdf-c/4.9.2/netcdf-c-4.9.2.tar.gz -O -J
#        curl https://downloads.unidata.ucar.edu/netcdf-fortran/4.6.1/netcdf-fortran-4.6.1.tar.gz -O -J
#        mkdir zlib
#        mkdir hdf5
#        mkdir netcdf-c
#        mkdir netcdf-f
#        tar -xzf zlib-1.3.1.tar.gz -C zlib --strip-components=1
#        tar -xzf hdf5-1.14.4-3.tar.gz -C hdf5 --strip-components=1
#        tar -xzf netcdf-c-4.9.2.tar.gz -C netcdf-c --strip-components=1
#        tar -xzf netcdf-fortran-4.6.1.tar.gz -C netcdf-f --strip-components=1

    - name: Download zlib
      shell: bash
      run: |
        curl https://zlib.net/zlib-1.3.1.tar.gz -O -J
        mkdir zlib
        tar -xzf zlib-1.3.1.tar.gz -C zlib --strip-components=1

    - name: Compile zlib
      shell: cmd
      run: |
        unix2dos -n "%GITHUB_WORKSPACE%\modflow6\.github\common\compile_zlib.sh" "%TEMP%\compile_zlib.sh"
        "%TEMP%\compile_zlib.sh"
        "%ONEAPI_ROOT%\setvars.bat" intel64 vs2022 && "C:\tools\cygwin\bin\bash.exe" --login --norc -eo pipefail -o igncr "%TEMP%\compile_zlib.sh"
        #echo "PKG_CONFIG_PATH=$GITHUB_WORKSPACE/zlib/lib/pkgconfig" >> $GITHUB_ENV
        #echo "$GITHUB_WORKSPACE/zlib/lib" >> $GITHUB_PATH

    - name: Update pixi
      shell: cmd
      run: |
        unix2dos -n "%GITHUB_WORKSPACE%\modflow6\.github\common\update_pixi.bat" "%TEMP%\update_pixi.bat"
        "%TEMP%\update_pixi.bat"

    - name: Build modflow6
      shell: cmd
      run: |
        unix2dos -n "%GITHUB_WORKSPACE%\modflow6\.github\common\compile_ext.bat" "%TEMP%\compile_ext.bat"
        "%ONEAPI_ROOT%\setvars.bat" intel64 vs2022 && "%TEMP%\compile_ext.bat"

    - name: Show Meson logs
      if: failure()
      shell: bash
      working-directory: modflow6
      run: cat builddir/meson-logs/meson-log.txt

    - name: Update flopy
      working-directory: modflow6
      shell: cmd
      run: pixi run update-flopy

    - name: Get executables
      working-directory: modflow6/autotest
      shell: cmd
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: pixi run get-exes

    - name: Convert unix2dos
      shell: cmd
      run: |
        unix2dos -n "%GITHUB_WORKSPACE%\modflow6\.github\common\test_ext_parallel.bat" "%TEMP%\test_ext_parallel.bat"
        unix2dos -n "%GITHUB_WORKSPACE%\modflow6\.github\common\test_ext_serial.bat" "%TEMP%\test_ext_serial.bat"

    - name: Test programs
      if: github.ref_name != 'master'
      shell: cmd
      env:
        REPOS_PATH: ${{ github.workspace }}
      run: |
        "%ONEAPI_ROOT%\setvars.bat" intel64 vs2022 && "%TEMP%\test_ext_parallel.bat"

    - name: Test programs
      if: github.ref_name == 'master'
      shell: cmd
      env:
        REPOS_PATH: ${{ github.workspace }}
        MARKERS: not developmode
      run: |
        "%ONEAPI_ROOT%\setvars.bat" intel64 vs2022 && "%TEMP%\test_ext_parallel.bat"

    - name: Test programs (serial)
      if: github.ref_name != 'master'
      shell: cmd
      env:
        REPOS_PATH: ${{ github.workspace }}
      run: |
        "%ONEAPI_ROOT%\setvars.bat" intel64 vs2022 && "%TEMP%\test_ext_serial.bat"

    - name: Test programs (serial)
      if: github.ref_name == 'master'
      shell: cmd
      env:
        REPOS_PATH: ${{ github.workspace }}
        MARKERS: not developmode
      run: |
        "%ONEAPI_ROOT%\setvars.bat" intel64 vs2022 && "%TEMP%\test_ext_serial.bat"
